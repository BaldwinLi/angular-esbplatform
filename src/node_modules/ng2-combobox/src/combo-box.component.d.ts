import { OnInit, EventEmitter } from '@angular/core';
import { Observable } from 'rxjs/Rx';
import { ControlValueAccessor } from '@angular/forms';
export declare class ComboBoxComponent implements ControlValueAccessor, OnInit {
    displayField: string;
    valueField: string;
    remote: boolean;
    clearOnSelect: boolean;
    forceSelection: boolean;
    localFilter: boolean;
    localFilterCaseSensitive: boolean;
    typeAheadDelay: number;
    inputClass: string;
    inputPlaceholder: string;
    loadingIconClass: string;
    triggerIconClass: string;
    dataRoot: string;
    disabledField: string;
    editable: boolean;
    noMatchesText: string;
    onQuery: EventEmitter<string>;
    onSelect: EventEmitter<string>;
    onCreate: EventEmitter<string>;
    onBlur: EventEmitter<any>;
    onInitValue: EventEmitter<string>;
    _input: any;
    hideList: boolean;
    data: any[];
    private _loading;
    private _listDataSubscription;
    private _aheadTimer;
    private _currVal;
    private _marked;
    private _initialData;
    private _hasFocus;
    private _tmpVal;
    private _enterCued;
    private _noBlur;
    private propagateTouch;
    private propagateChange;
    constructor();
    ngOnInit(): void;
    listData: Observable<Object[]> | Object[];
    currVal: string;
    marked: number;
    loading: boolean;
    onKeyDown(event: KeyboardEvent): boolean;
    onItemClick(index: number, item: Object): void;
    onFieldBlur(event: FocusEvent): void;
    onFieldFocus(): void;
    onMouseEnterList(): void;
    onMouseLeaveList(): void;
    isMarked(value: Object): boolean;
    isDisabled(value: Object): boolean;
    private handleEnter();
    private handleUp();
    private handleDown();
    private clear();
    private getDisplayValue(val);
    private getValueValue(val);
    private loadData();
    private sendModelChange(val);
    private searchValueObject(value);
    onTriggerClick(): void;
    writeValue(value: any): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
}
